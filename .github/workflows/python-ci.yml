name: Python CI
# 1. Run linting and static code checks
# 2. Test python syncing script
# 3. Build and publish docker container
# 4. Test published docker container

on:
  pull_request:
    types: ['opened', 'reopened', 'synchronize']
  push:
    branches:
    - 'development'
    paths:
    - '**.py'
  workflow_dispatch:
    inputs:
      numChaos:
        description: 'Number of items the chaos monkey should manipulate during test'
        required: false
        default: '4'

jobs:
  black_formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable
        with:
          options: "-l 105 --check --diff"
          src: "."
  codespell_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: codespell-project/actions-codespell@master
        with:
          check_filenames: true
          skip: .*,*.csv
  bandit_security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: jpetrucciani/bandit-check@master
        with:
          path: '.'
          bandit_flags: '--recursive --skip B403,B101,B301'
  flake8_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          ignore: "E203,W503,E231,E402"
          max-line-length: "105"
          path: "."
          args: '--count --show-source --statistics'
  isort_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - uses: isort/isort-action@master
        with:
            configuration: "--check-only --profile black"
  mypy_typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: jpetrucciani/mypy-check@master
        with:
          path: '.'
          mypy_flags: '--install-types --non-interactive'

  python_test:
    runs-on: ubuntu-latest
    needs: [black_formatting, codespell_check, bandit_security, flake8_lint, isort_check, mypy_typecheck]
    env:
      TEST_RUNNER: python
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up python environment
        uses: actions/setup-python@v2
      - name: Setup testing environment
        uses: ./.github/actions/setup-environment
        with:
          AZURE_TOKEN: ${{ secrets.AZURE_TOKEN }}
          ACCOUNT_URL: ${{ secrets.ACCOUNT_URL }}

      # Start testing

      # Test initial sync
      - name: Prepare initial sync conflicts
        run: python test/ChaosMonkey.py --initial --num ${{ github.event.inputs.numChaos || 4  }}
      - name: Test initial sync
        run: python GMSync.py --initial
        timeout-minutes: 5
      - name: Check results
        if: always()
        run: |
          mv logs/sync.log logs/${{ env.TEST_RUNNER }}_sync_initial.log && \
          [[ -z "$(grep -e ERROR -e WARNING logs/${{ env.TEST_RUNNER }}_sync_initial.log)" ]] || exit 1

      # End testing

      - name: Cleanup testing environment
        uses: ./.github/actions/cleanup-environment
        if: always()
        with:
          AZURE_TOKEN: ${{ secrets.AZURE_TOKEN }}
          ACCOUNT_URL: ${{ secrets.ACCOUNT_URL }}
          TEST_RUNNER: ${{ env.TEST_RUNNER }}

  docker_build:
    runs-on: ubuntu-latest
    needs: python_test
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          no-cache: true
          push: true
          tags: antonplagemann/google-monica-sync:next

  docker_test:
    runs-on: ubuntu-latest
    needs: docker_build
    env:
      TEST_RUNNER: docker
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2
      - name: Setup testing environment
        uses: ./.github/actions/setup-environment
        with:
          AZURE_TOKEN: ${{ secrets.AZURE_TOKEN }}
          ACCOUNT_URL: ${{ secrets.ACCOUNT_URL }}

      # Start testing

      # Test initial sync
      - name: Prepare initial sync conflicts
        run: python test/ChaosMonkey.py --initial --num ${{ github.event.inputs.numChaos || 4  }}
      - name: Test initial sync
        run: docker-compose -f test/docker-compose-sync.yml -f test/docker-compose-sync-initial.yml --env-file .env up
        timeout-minutes: 1
      - name: Check results
        if: always()
        run: |
          mv logs/sync.log logs/${{ env.TEST_RUNNER }}_sync_initial.log && \
          [[ -z "$(grep -e ERROR -e WARNING logs/${{ env.TEST_RUNNER }}_sync_initial.log)" ]] || exit 1

      # End testing

      - name: Cleanup testing environment
        uses: ./.github/actions/cleanup-environment
        if: always()
        with:
          AZURE_TOKEN: ${{ secrets.AZURE_TOKEN }}
          ACCOUNT_URL: ${{ secrets.ACCOUNT_URL }}
          TEST_RUNNER: ${{ env.TEST_RUNNER }}
